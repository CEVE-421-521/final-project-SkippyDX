---
title: "Final Project Report"
author: "Kyle Olcott (kto1) and Patricia Hashimoto (pch3)"
jupyter: julia-1.10
date: 2024-04-30

# YOU DO NOT NEED BOTH PDF AND DOCX.
# COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
#
# Feel free to customize the look of your final document:
# https://quarto.org/docs/reference/formats/pdf.html
# https://quarto.org/docs/reference/formats/docx.html

format: 
    html: default
    #pdf:
    #    documentclass: article
    #    fontsize: 11pt
    #    geometry:
    #        - margin=1in  
     #   number-sections: true
     #   code-line-numbers: true
    docx: 
        toc: true
        fig-format: png
        number-sections: true
        code-line-numbers: true

date-format: "ddd., MMM. D"

# See Quarto docs: https://quarto.org/docs/authoring/footnotes-and-citations.html
# you can export your references from Zotero, EndNote, or other reference managers
# from Zotero you'll need https://retorque.re/zotero-better-bibtex/
references: references.bib
bibliography: references.bib

# recommended, but not required
# you will need jupyter-cache installed
execute: 
  cache: true
---

```{julia}
#| echo: false
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using LaTeXStrings
using Metaheuristics
using Plots
using Random
using Unitful
using Plots.PlotMeasures

Plots.default(; margin=5Plots.mm)
```

```{julia}
#| echo: false
#| output: false
using Revise
using HouseElevation
```

## Problem Statement

Currently, our model bases the cost of reconstructing the house each year based on the current value of the house. In the real world, however, house prices have consistently risen with an average appreciation rate of about 4.5% annually in the United States. Furthermore, our model fails to capture the increased cost of construction due to scarcity after a natural disaster. These two missing features may lead to our model greatly underestimating the cost of reconstruction in future years as a $100k construction job now may cost millions in the future. This discrepancy may lead to our model favoring lower elevations than higher ones, raising the vulnerability of houses which use this decision support tool when elevating their house against flood events. 

## Selected Feature

The two features added to the model are a scarcity factor as well as a housing market discount rate. The housing market discount rate will represent the rate at which the value of the house increases per year. By multiplying the value of the house by this rate each year, the model will be able to more accurately capture the actual cost of reconstruction at later years where our house may be worth millions more. However, uncertainty in the housing market and the possibility of our house’s value ballooning and diluting the influence early years’ NPVs have may have us look into decreasing discount rates for this feature.

The scarcity factor will raise the cost of reconstruction further by multiplying it with the annual damages. This factor will change between SOW’s and will likely depend on the magnitude of the flood event in order to differentiate scarcity during low damage and high damage flooding events. 


# Literature Review

The majority of articles refer to construction cost increases after natural disasters as “demand surges”. While many factors are theorized to play into demand surges, such as increased labor costs, material costs, etc., there is little consensus of how these factors quantitatively play into the value of the demand surge following a hazard (Olesen et. al., 2011). Despite the lack of formal consensus on the topic, though, demand surge can still be approximately modeled based on historical data and basing our assumptions on previous research. For example, the paper with the highest claimed demand surge was 20% [@olsenporter2011]. From this, we can make assumptions about our boundaries for the demand surge with it ranging from 0-20%. Further research on this topic has also shown that there is a correlation between hazard magnitude and labor costs in East Coast states during hurricane season, a factor commonly known to influence demand surges [@olsenporter2013]. Using these findings, we can build our model to be a function where the input is the intensity of the hazard and the output is the demand surge. Finally, previous articles have included models for demand surge using a linear relationship [@olsenporter2013]. Copying this method can complete the function discussed previously, as our relationship between hazard intensity and demand surge can simply be modeled as a linear relationship too.

The current average housing market discount rate based on the average % increase in the US house price index is 4.5% [@fred]. As seen in the histogram below, the values for these discount rates each year are approximately normally distributed, which means our expected discount rate for housing will also be its average. Compounding the value of our house by 4.5% each year, though, may create an effect where earlier years, where the value of the house is low, may have low influence on the NPV compared to higher years. Looking at articles concerning a decreasing discount rate, many have referenced France and the United Kingdom’s governments use of a decreasing discount rate where it is periodically decreased based on prior calculations [@cropper2014]. A similar method can be employed here, where after a set amount of time during our 60 analysis period, the 4.5% discount rate drops.

![](PriceDist.png)
              
Figure 1: Distribution of House Price Increases

![](UKDR.png)
Figure 2: United Kingdom Social Decreasing Discount Rate 

# Methodology

## Implementation

The scarcity/demand surge feature will be added by assuming a linear relationship between the damage of the house and the demand surge magnitude. The highest value for a demand surge was found to be around 20%. Thus, if a house was damaged by 50%, the demand surge will be 50% of 20%, which is 10%. This 10% will then be multiplied unto the damage that the house suffered in order to model how much more it would cost to rebuild under scarcity. For the example before, this would be 50% * (1 + 10%) = 55% damage.

For the housing discount rate, since we can roughly approximate the distribution of the house price index changes to be normally distributed, the expected annual increase in the house’s value can simply be modeled as 4.5% (it’s average value). In order to implement the decreased discount rate along with this, the UK’s model will be used with our housing discount rate decreasing by 0.5% at 25 years.

In this cell, the house structure is created by defining its value, area for elevation costs, and it's height above the gauge.
```{julia}
#| output: false
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "one story, Contents, fresh water, short duration"
    row = @rsubset(haz_fl_dept, :Description == desc)[1, :] # select the row I want
    area = 500u"ft^2"
    height_above_gauge = 12u"ft"
    House(row; area=area, height_above_gauge=height_above_gauge, value_usd=250_000)
end

p = ModelParams(; house=house, years=2024:2083)
```

Here the infastructure to make the SOWs are created. The functions shown all sample a state variable in the SOW such as, the sea level rise scenario, the storm surge distribution, the discount rate, and the housing market discount rate.
```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.25))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end

function draw_discount_rate()
    return rand(Normal(0.05, 0.03))
end

function house_discount_rate()
    return 0.045
end

function draw_sow()
    slr = rand(slr_scenarios)
    surge_params = draw_surge_distribution()
    discount_rate = draw_discount_rate()
    house_discount = house_discount_rate()
    return SOW(slr, surge_params, discount_rate, house_discount)
end
```

Finally, a seed is set so we can compare different runs of the model with the SOWs changing. Using the functions defined in the last cell, the SOWs are created. With these SOWs, we can run the model using the source code.
```{julia}
#| output: false
Random.seed!(421521)
N_SOW = 10_000
N_SOW_opt = 10 # to start
sows = [draw_sow() for _ in 1:N_SOW]
sows_opt = first(sows, N_SOW_opt)
```

```{julia}
#| echo: false
#| output: false
bounds = boxconstraints(; lb=[0.0], ub=[14.0])
```

## Validation

To confirm that the implementation of the housing discount rate is taking place as expected, we look at one randomly sampled state of the world and a select few years. The expected actual damages computed as a function of the sampled sea level rise, sampled storm surge distribution, and housing characteristics that do not change are shown. 

Then the expected actual damages calculated based on one possible state of the world and the same fixed house characteristics used in the full implementation are shown with one action option of elevating the house 1 foot in a limited number of possible years. The housing multiplier for each year, which takes into account a housing "discount rate" that describes the housing value appreciation rate, estimated here as 4.5%, is also shown. Because the housing value increased by 4.5% each year, the multiplier is continuously compounding. Next, the expected actual damage calculated for each year for a house of the given value, $250,000, is shown. These values confirm that the calculations are taking place as intended.

```{julia}
#| code-overflow: wrap
run_sim(Action.(1.0), first(sows), ModelParams(; house=house, years=[2024, 2030]), true, false)
```

For example, for an expected actual damage share of 0.011587508736959039 in 2030,

$EAD = 0.011587508736959039 * 250000 * (1.045)^5 = 3772.4876436159875$.

A visual check confirms the increasing house value:

```{julia}
#| code-overflow: wrap
test_tuple = run_sim(Action.(1.0), first(sows), ModelParams(; house=house, years=2024:2065), false, true)


plot(2024:2065, last(test_tuple);
    xlabel="Year",
    ylabel="House Value [USD]",
    title = "House Value Over Time")
```

The demand surge is calculated by taking 20% of the expected damage. This value is added to one to create a multiplier that is applied to the expected damage again to calculate the expected damage under scarcity induced by the demand surge. 

This example confirms that these calculations are occurring correctly. For example, for an EAD of 0.01156077841743563 in 2030:

$(0.01156077841743563 * 0.2 + 1) * 0.01156077841743563 = 0.011587508736959039$.

# Results

This cell created a vector of NPVs at each elevation. Three other nearly identical cells are also used to run the other functions using different implemented features
```{julia}
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
npvsnew = npvs_moore
```

```{julia}
#| echo: false
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim_house(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
npvshouse = npvs_moore
```

```{julia}
#| echo: false
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim_scarcity(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
npvsscarcity = npvs_moore
```

```{julia}
#| echo: false
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim_old(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
```
The vectors of NPVs are then plotted together in this cell.
```{julia}
plot(
    elevations_try,
    npvs_moore ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    label="Old Model NPVs",
    marker=:circle,
    title = "NPV vs. Elevation Actions using Different Model Features",
)
plot!(elevations_try, npvsnew ./ 1000; label="New Model NPVs", marker=:circle)
plot!(elevations_try, npvsscarcity ./ 1000; label="NPVs w/ only Demand Surge", marker=:circle)
plot!(elevations_try, npvshouse ./ 1000; label="NPVs w/ only House Value Increase", marker=:circle)
```

The graph above shows the NPV vs. Elevation for 4 different models: the old model with no features, models using only the demand surge feature and housing market discount rate feature, and both features. 

# Conclusions

## Discussion

As seen from our results, the two implemented features significantly decrease the NPV at each elevation, showing that our old model was underestimating the construction costs by nearly a factor of 3 at some elevations. Furthermore, the features significantly reduced the robustness of lower elevations as the damages that those actions do suffer from matter much more with the cost of reconstruction increasing. While an optimal elevation action was not found for our new model due to the max elevation action being 14ft, the general trend in our NPV vs. Elevation graph shows that an optimal solution can eventually be found at a higher elevation. This trend supports our expectation at the beginning of the project that these features would favor higher elevations that are subject to little or no damages from flooding. These findings are important in the context of climate risk management as significantly underestimating factors that play into the NPV can have catastrophic consequences with unexpected repair costs if actions are taken based on this decision support tool. 

Some limitations of our model are that the house value still does not accurately capture the construction costs for the house. While the assumption that the house value is directly related to construction costs is used in both our old and new model, part of that value also includes items which do not necessarily need to be repaired, such as the land, or location positively influencing house price. Finding a method to separate the value of the physical house from other factors may be useful to implement in the future. Furthermore, due to how construction costs significantly change over time, this model may greatly benefit from the inclusion of sequential decisions as lower elevation actions can be taken while the house value is low, and higher elevations actions taken in later years when construction costs matter more. If implemented, though, it may be useful to model the increased cost associated with elevating a house in later years. 

## Conclusions

Our implemented features successfully solve the issue posed in the problem statement. The issue of rising house prices not being fully captured is solved by the inclusion of a housing discount rate that increases the value of our house each year. Furthermore, the issue of scarcity is also fixed by creating a demand surge factor based on the intensity of the flood hazard that further increases the cost to repair the house each year. These features both work to change the magnitude of construction costs at different elevations, raising the optimal elevation significantly.

These findings implicate that models which fail to capture the changing cost of construction over time may be significantly underestimating the optimal elevation for a house. This is particularly concerning as in the context of climate risk management, as overestimating precautions is often better than underestimating them, especially when the safety of people, such as the homeowners, are at stake. Using these features, homeowners can make a more informed decision when elevating their house so that they do not find themselves in a situation where there are more repair costs than originally anticipated. Further research in this area could analyze the possible factors that play into a demand surge and furthering a consensus on a concrete definition for it. Quantitative analysis for the demand surge would greatly benefit climate risk management models as many costs aside the house repairs will generally also be raised due to scarcity following a natural disaster.


# References

:::{#refs}
:::


<!-- ## Objective function

We next need an objective function.
Recall that we want to _maximize_ NPV, but the optimization package we are using is set up to _minimize_.

## New model
```{julia}
function objective_function(Δh::Vector{Float64})
    a = Action(Δh[1])
    npvs = [run_sim(a, sow, p, false, false) for sow in sows_opt]
    return -mean(npvs)
end
```


## Running

We can throw this straight into the `optimize` function:

```{julia}
result = optimize(objective_function, bounds)
```

We can view the minimum of the objective function with

```{julia}
minimum(result)
```

and the value of the decision variable that achieves that minimum with:

```{julia}
minimizer(result)
```


```{julia}
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
```

and plot

```{julia}
plot(
    elevations_try,
    npvs_moore ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    label="First $(N_more) SOWs",
    marker=:circle,
    title = "\nHouse Elevation NPV with House Value\nAppreciation and Post-Storm Scarcity",
    topmargin = 9mm
)

# savefig("implementation_results.png")
```
```{julia}
function objective_function(Δh::Vector{Float64})
    a = Action(Δh[1])
    npvs = [run_sim_old(a, sow, p, false, false) for sow in sows_opt]
    return -mean(npvs)
end
```

## Running

We can throw this straight into the `optimize` function:

```{julia}
result = optimize(objective_function, bounds)
```

We can view the minimum of the objective function with

```{julia}
minimum(result)
```

and the value of the decision variable that achieves that minimum with:

```{julia}
minimizer(result)
```

```{julia}
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_moore = [
    mean([run_sim_old(a, sow, p, false, false) for sow in first(sows, N_more)]) for a in actions_try
]
```

and plot

```{julia}
plot(
    elevations_try,
    npvs_moore ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    label="First $(N_more) SOWs",
    marker=:circle,
)
```

### Validation

To confirm that the implementation of the housing discount rate is taking place as expected, we look at one randomly sampled state of the world and a select few years. The expected actual damages computed as a function of the sampled sea level rise, sampled storm surge distribution, and housing characteristics that do not change are shown. 

The the expected actual damages calculated based on one possible state of the world and the same fixed house characteristics used in the full implementation are shown with one action option of elevating the house 1 foot in a limited number of possible years. The housing multiplier for each year, which takes into account a housing "discount rate" that describes the housing value appreciation rate, estimated here as 4.5%, is also shown. Because the housing value increased by 4.5% each year, the multiplier is continuously compounding. Next, the expected actual damage calculated for each year for a house of the given value, $250,000, is shown. These values confirm that the calculations are taking place as intended.

```{julia}
#| code-overflow: wrap
run_sim(Action.(1.0), first(sows), ModelParams(; house=house, years=[2024, 2030]), true, false)
```

For example, for an expected actual damage share of 0.011587508736959039 in 2030,

$EAD = 0.011587508736959039 * 250000 * (1.045)^5 = 3772.4876436159875$.

A visual check confirms the increasing house value:

```{julia}
#| code-overflow: wrap
test_tuple = run_sim(Action.(1.0), first(sows), ModelParams(; house=house, years=2024:2065), false, true)


plot(2024:2065, last(test_tuple);
    xlabel="Year",
    ylabel="House Value [USD]",
    label = false,
    title = "\nHouse Value Over Time")

```

The demand surge is calculated by taking 20% of the expected damage. This value is added to one to create a multiplier that is applied to the expected damage again to calculate the expected damage under scarcity induced by the demand surge. 

This example confirms that these calculations are occurring correctly. For example, for a demand surge of 0.01156077841743563 in 2030:

$(0.01156077841743563 * 0.2 + 1) * 0.01156077841743563 = 0.011587508736959039$. -->